#!./tools/vlua

dofile('tools/vmake_base.lua')

local CC  = 'gcc'
local CXX = 'g++'
local AR  = 'ar -rc'
local DLL_SUFFIX = '.so'
local EXE_SUFFIX = vlua.OS=='windows' and '.exe' or ''
local CFLAGS  = {}
local CXX_CFLAGS = {}
local OBJPATH = path_concat('objs', 'release')

local PUSS_INCLUDE_PATH = path_concat('bin', 'include')
local GEN_INCLUDE_PATH = path_concat('objs', 'gen')
local PUSS_MODULE_SUFFIX = ''
local INCLUDES = { '3rd', PUSS_INCLUDE_PATH, GEN_INCLUDE_PATH }

-- debug && asan
do
	if vlua.match_arg('^%-debug$') then
		array_push(CFLAGS, '-g', '-O0', '-D_DEBUG')
		OBJPATH = path_concat('objs', 'debug')
		PUSS_MODULE_SUFFIX = PUSS_MODULE_SUFFIX .. '_d'
	else
		array_push(CFLAGS, '-s', '-O2', '-DNDEBUG')
	end

	if vlua.match_arg('^%-asan$') then
		array_push(CFLAGS, '-ggdb', '-fsanitize=address', '-fno-omit-frame-pointer')
		OBJPATH = OBJPATH .. '_asan'
		PUSS_MODULE_SUFFIX = PUSS_MODULE_SUFFIX .. '_asan'
	end
end

array_push(CFLAGS, '-Wall')

-----------------------------
-- common utils

local function make_c2objs(srcs, include_paths, ...)	-- ... is cflags
	if type(srcs)=='string' then srcs = scan_files(srcs, function(f) return f:match('^.+%.c$') end) end
	local cflags = args_concat(...)
	local incs = array_convert(include_paths, function(v) return '-I'..v end)
	return make_objs(srcs, include_paths
		, function(f) return path_concat(OBJPATH, f) end
		, function(t) return CC, CFLAGS, cflags, incs, '-o', t.obj, '-c', t.src end)
end

local function make_cpp2objs(srcs, include_paths, ...)	-- ... is cflags
	if type(srcs)=='string' then srcs = scan_files(srcs, function(f) return f:match('^.+%.cpp$') or f:match('^.+%.cxx$') end) end
	local cflags = args_concat(...)
	local incs = array_convert(include_paths, function(v) return '-I'..v end)
	return make_objs(srcs, include_paths
		, function(f) return path_concat(OBJPATH, f) end
		, function(t) return CXX, CFLAGS, CXX_CFLAGS, cflags, incs, '-o', t.obj, '-c', t.src end)
end

vmake_target_add('', function(target)
	local ts = os.time()
	local targets = vmake_target_all()
	targets['clean'] = nil	-- ignore clean
	targets[target] = nil   -- ignore this
	for target in pairs(targets) do
		local ok, err = pcall(vmake, target)
		if not ok then print('vmake', target, 'error:', err) end
	end
	local te = os.time()
	print('use time:', te-ts)
end)

vmake_target_add('clean', function(target)
	local rm = vlua.OS=='windows' and 'rd /S /Q ' or 'rm -rf '
	os.execute(rm .. 'objs')
end)

-----------------------------
-- puss core

vmake_target_add('puss', function(target)
	local slibs = vmake('puss_core', 'lua53')
	local cflags = { '-D_PUSS_MODULE_SUFFIX=\\"'..PUSS_MODULE_SUFFIX..'.so\\"' }
	local incs = array_pack(INCLUDES, 'modules')
	local libs = vlua.OS=='windows' and '' or '-lm -ldl'
	local objs = make_c2objs(target, incs, cflags)
	local output = path_concat('bin', target..PUSS_MODULE_SUFFIX..EXE_SUFFIX)
	return make_target(output, {objs, slibs}, CC, CFLAGS, '-o', output, objs, slibs, libs)
end)

vmake_target_add('luaproxy', function(target)
	local luapath = path_concat('3rd', 'lua-5.3.4', 'src')
	local luaproxy_lua = path_concat('tools', 'luaproxy.lua')
	local deps =
		{ luaproxy_lua
		, make_copy('luaconf.h', PUSS_INCLUDE_PATH, luapath)
		, make_copy('lua.h', PUSS_INCLUDE_PATH, luapath)
		, make_copy('lualib.h', PUSS_INCLUDE_PATH, luapath)
		, make_copy('lauxlib.h', PUSS_INCLUDE_PATH, luapath)
		}
	if not( check_deps(path_concat(PUSS_INCLUDE_PATH, 'luaproxy.h'), deps)
		and check_deps(path_concat(PUSS_INCLUDE_PATH, 'luaproxy.symbols'), deps)
		)
	then
		shell_execute(vlua.self, luaproxy_lua, '-path="'..PUSS_INCLUDE_PATH..'"')
	end
end)

vmake_target_add('lua53', function(target)
	local cflags = vlua.OS=='windows' and '' or '-DLUA_USE_LINUX'
	local luapath = path_concat('3rd', 'lua-5.3.4', 'src')
	local srcs = scan_files(luapath, function(f)
		if f=='lua.c' then return end
		if f=='luac.c' then return end
		return f:match('^.+%.c$')
	end)
	local objs = make_c2objs(srcs, nil, cflags)
	local output = path_concat(OBJPATH, 'lib'..target..'.a')
	return make_target(output, objs, AR, output, objs)
end)

vmake_target_add('puss_core', function(target)
	vmake('luaproxy')

	local srcpath = path_concat('modules', target)
	vmake('luaproxy')
	make_copy('puss_macros.h', PUSS_INCLUDE_PATH, srcpath)
	make_copy('puss_module.h', PUSS_INCLUDE_PATH, srcpath)

	local objs = make_c2objs(srcpath, INCLUDES)
	local lib = path_concat(OBJPATH, 'lib'..target..'.a')
	return make_target(lib, objs, AR, lib, objs)
end)

-----------------------------
-- puss gtk

local function gobject_enums_parse(cflags, spath, source, match_regex)
	local src, sz, mtime = scan_and_lookup_file(cflags, path_concat(spath, source))
	if not src then return end
	local target = path_concat(GEN_INCLUDE_PATH, source..'.inl')
	if check_deps(target, { [src] = mtime }) then return true end
	local strfmt = string.format
	mkdir_by_targets(target)
	local f = io.open(target, 'w')
	if not f then error('gobject_enums_parse() open file error!') end
	f:write('// generated by vmake, NOT modify it\n')
	f:write(strfmt('// source: %s\n\n', source))
	for line in io.lines(src) do
		local klass = line:match(match_regex)
		if klass then f:write(strfmt('__reg(%s);\n', klass)) end
	end
	f:close()
end

vmake_target_add('puss_gobject', function(target)
	vmake('puss_core')

	local srcpath = path_concat('modules', target)
	make_copy('puss_gobject_ffi_reg.h', PUSS_INCLUDE_PATH, srcpath)
	make_copy('puss_module_gobject.h', PUSS_INCLUDE_PATH, srcpath)

	local cflags = shell('pkg-config --cflags glib-2.0 gobject-2.0 gio-2.0 libffi')
	local libs = shell('pkg-config --libs glib-2.0 gobject-2.0 gio-2.0 libffi')
	gobject_enums_parse(cflags, 'gobject', 'glib-types.h', '^%s*#%s*define%s+(G_TYPE_[_%w]+)')	-- #define G_TYPE_XXX
	gobject_enums_parse(cflags, 'gio', 'gioenumtypes.h', '^%s*#%s*define%s+(G_TYPE_[_%w]+)')	-- #define G_TYPE_XXX

	local objs = make_c2objs(srcpath, INCLUDES, '-fPIC', '-fvisibility=hidden', cflags)
	local output = path_concat('bin', 'modules', target..PUSS_MODULE_SUFFIX..'.so')
	return make_target(output, objs, CC, CFLAGS, '-shared', '-o', output, objs, libs)
end)

vmake_target_add('puss_gtk', function(target)
	vmake('puss_gobject')

	local cflags = shell('pkg-config --cflags gtk+-3.0')
	local libs = shell('pkg-config --libs gtk+-3.0')
	gobject_enums_parse(cflags, 'gdk', 'gdkenumtypes.h', '^%s*#%s*define%s+(GDK_TYPE_[_%w]+)')		-- #define GDK_TYPE_XXX
	gobject_enums_parse(cflags, 'gtk', 'gtktypebuiltins.h', '^%s*#%s*define%s+(GTK_TYPE_[_%w]+)')	-- #define GTK_TYPE_XXX

	local objs = make_c2objs(path_concat('modules', target), INCLUDES, '-fPIC', '-fvisibility=hidden', cflags)
	local output = path_concat('bin', 'modules', target..PUSS_MODULE_SUFFIX..'.so')
	return make_target(output, objs, CC, CFLAGS, '-shared', '-o', output, objs, libs)
end)

vmake_target_add('puss_gtksourceview', function(target)
	vmake('puss_gobject')

	local cflags = shell('pkg-config --cflags gtksourceview-3.0')
	local libs = shell('pkg-config --libs gtksourceview-3.0')
	gobject_enums_parse(cflags, 'gtksourceview', 'gtksourceview-enumtypes.h', '^%s*#%s*define%s+(GTK_SOURCE_TYPE_[_%w]+)')	-- #define GTK_SOURCE_TYPE_XXX

	local objs = make_c2objs(path_concat('modules', target), INCLUDES, '-fPIC', '-fvisibility=hidden', cflags)
	local output = path_concat('bin', 'modules', target..PUSS_MODULE_SUFFIX..'.so')
	return make_target(output, objs, CC, CFLAGS, '-shared', '-o', output, objs, libs)
end)

-----------------------------
-- puss nuklear

vmake_target_add('puss_nuklear_proxy', function(target)
	local src = path_concat('3rd', 'nuklear', 'nuklear.h')
	local nuklearproxy_lua = path_concat('tools', 'nuklearproxy.lua')
	local deps =
		{ src
		, nuklearproxy_lua
		}
	if not( check_deps(path_concat(PUSS_INCLUDE_PATH, 'nuklear.h'), deps)
		and check_deps(path_concat(PUSS_INCLUDE_PATH, 'nuklear.symbols'), deps)
		and check_deps(path_concat(PUSS_INCLUDE_PATH, 'nuklear.enums'), deps)
		)
	then
		shell_execute(vlua.self, nuklearproxy_lua, '-out="'..PUSS_INCLUDE_PATH..'"', '-src="'..src..'"')
	end
end)

vmake_target_add('puss_nuklear_glfw3', function(target)
	vmake('puss_nuklear_proxy')

	local use_static = (vlua.OS=='windows')
	local src = path_concat('modules', target)
	local incs = array_pack(INCLUDES, src)
	local libs = '-lm'
	local cflags = use_static and {'-static', shell('pkg-config --static --cflags glfw3')} or shell('pkg-config --cflags glfw3')
	local libs = use_static and shell('pkg-config --static --libs glfw3') or shell('pkg-config --libs glfw3')
	local objs = make_c2objs(src, incs, '-fPIC', '-fvisibility=hidden')
	local output = path_concat('bin', 'modules', target..PUSS_MODULE_SUFFIX..'.so')
	return make_target(output, objs, CC, CFLAGS, cflags, '-shared', '-o', output, objs, libs)
end)

-----------------------------
-- scintilla iface

local SCINTILLA_ROOT_PATH = path_concat('3rd', 'scintilla-4.0.0')
local SCINTILLA_INCLUDE_PATH = path_concat(SCINTILLA_ROOT_PATH, 'include')

vmake_target_add('scintilla_iface', function(target)
	make_copy('Scintilla.iface', GEN_INCLUDE_PATH, SCINTILLA_INCLUDE_PATH)

	local scintilla_iface_lua = path_concat('tools', 'scintilla_iface.lua')
	local scintilla_iface = path_concat(GEN_INCLUDE_PATH, 'Scintilla.iface')
	local scintilla_output = path_concat(GEN_INCLUDE_PATH, 'scintilla.iface.inl')
	local deps =
		{ scintilla_iface_lua
		, scintilla_iface
		}
	return make_target( scintilla_output, deps
		, vlua.self, scintilla_iface_lua
		, '-input='..scintilla_iface
		, '-output='..scintilla_output
		)
end)

-----------------------------
-- scintilla gtk

vmake_target_add('gtkscintilla', function(target)
	-- see <scintilla/gtk/makefile>
	local cxxflags = { '-fPIC', '-DGTK', '-DSCI_LEXER', '-DNO_CXX11_REGEX' }
	local gtkcflags =
		{ shell('pkg-config --cflags gtk+-3.0')
		, '-DGDK_PIXBUF_DISABLE_DEPRECATED -DGDK_DISABLE_DEPRECATED -DGTK_DISABLE_DEPRECATED -DDISABLE_GDK_FONT' 
		}
	local incs =
		{ SCINTILLA_INCLUDE_PATH
		, path_concat(SCINTILLA_ROOT_PATH, 'src')
		, path_concat(SCINTILLA_ROOT_PATH, 'lexlib')
		}
	local objs = make_c2objs(path_concat(SCINTILLA_ROOT_PATH, 'gtk'), INCLUDES, '-fPIC', gtkcflags)
	local gtkobjs = make_cpp2objs(path_concat(SCINTILLA_ROOT_PATH, 'gtk'), incs, cxxflags, gtkcflags)
	local srcobjs = make_cpp2objs(path_concat(SCINTILLA_ROOT_PATH, 'src'), incs, cxxflags)
	local lexlibobjs = make_cpp2objs(path_concat(SCINTILLA_ROOT_PATH, 'lexlib'), incs, cxxflags)
	local lexobjs = make_cpp2objs(path_concat(SCINTILLA_ROOT_PATH, 'lexers'), incs, cxxflags)
	table.sort(lexobjs)
	local lib = path_concat(OBJPATH, 'lib'..target..'.a')
	return make_target(lib, objs, AR, lib, objs, gtkobjs, srcobjs, lexlibobjs, lexobjs)
end)

vmake_target_add('puss_gtkscintilla', function(target)
	vmake('puss_gobject', 'scintilla_iface')
	local slibs = vmake('gtkscintilla')
	local cflags = { '-fPIC', shell('pkg-config --cflags glib-2.0 gmodule-2.0 gtk+-3.0') }
	local libs = shell('pkg-config --libs glib-2.0 gmodule-2.0 gtk+-3.0')
	local objs = make_c2objs(path_concat('modules', target), array_pack(INCLUDES, SCINTILLA_INCLUDE_PATH), '-fPIC', '-fvisibility=hidden', cflags)
	local output = path_concat('bin', 'modules', target..PUSS_MODULE_SUFFIX..'.so')
	return make_target(output, {objs, slibs}, CXX, CFLAGS, CXXFLAGS, '-shared', cflags, '-o', output, objs, slibs, libs)
end)

