// NOTICE : generate by luaproxy_gen.lua

#ifndef _LUA_PROXY_INC_DECL_H__
#define _LUA_PROXY_INC_DECL_H__

typedef struct _LuaProxy {
	int     __lua_proxy_inited__;
  lua_State *     (*_lua_newstate)(lua_Alloc f, void *ud);
  void            (*_lua_close)(lua_State *L);
  lua_State *     (*_lua_newthread)(lua_State *L);
  lua_CFunction   (*_lua_atpanic)(lua_State *L, lua_CFunction panicf);
  const lua_Number *(*_lua_version)(lua_State *L);
  int             (*_lua_absindex)(lua_State *L, int idx);
  int             (*_lua_gettop)(lua_State *L);
  void            (*_lua_settop)(lua_State *L, int idx);
  void            (*_lua_pushvalue)(lua_State *L, int idx);
  void            (*_lua_rotate)(lua_State *L, int idx, int n);
  void            (*_lua_copy)(lua_State *L, int fromidx, int toidx);
  int             (*_lua_checkstack)(lua_State *L, int n);
  void            (*_lua_xmove)(lua_State *from, lua_State *to, int n);
  int             (*_lua_isnumber)(lua_State *L, int idx);
  int             (*_lua_isstring)(lua_State *L, int idx);
  int             (*_lua_iscfunction)(lua_State *L, int idx);
  int             (*_lua_isinteger)(lua_State *L, int idx);
  int             (*_lua_isuserdata)(lua_State *L, int idx);
  int             (*_lua_type)(lua_State *L, int idx);
  const char     *(*_lua_typename)(lua_State *L, int tp);
  lua_Number      (*_lua_tonumberx)(lua_State *L, int idx, int *isnum);
  lua_Integer     (*_lua_tointegerx)(lua_State *L, int idx, int *isnum);
  int             (*_lua_toboolean)(lua_State *L, int idx);
  const char     *(*_lua_tolstring)(lua_State *L, int idx, size_t *len);
  size_t          (*_lua_rawlen)(lua_State *L, int idx);
  lua_CFunction   (*_lua_tocfunction)(lua_State *L, int idx);
  void	       *   (*_lua_touserdata)(lua_State *L, int idx);
  lua_State      *(*_lua_tothread)(lua_State *L, int idx);
  const void     *(*_lua_topointer)(lua_State *L, int idx);
  void            (*_lua_arith)(lua_State *L, int op);
  int             (*_lua_rawequal)(lua_State *L, int idx1, int idx2);
  int             (*_lua_compare)(lua_State *L, int idx1, int idx2, int op);
  void            (*_lua_pushnil)(lua_State *L);
  void            (*_lua_pushnumber)(lua_State *L, lua_Number n);
  void            (*_lua_pushinteger)(lua_State *L, lua_Integer n);
  const char *    (*_lua_pushlstring)(lua_State *L, const char *s, size_t len);
  const char *    (*_lua_pushstring)(lua_State *L, const char *s);
  const char *    (*_lua_pushvfstring)(lua_State *L, const char *fmt, va_list argp);
  const char *    (*_lua_pushfstring)(lua_State *L, const char *fmt, ...);
  void            (*_lua_pushcclosure)(lua_State *L, lua_CFunction fn, int n);
  void            (*_lua_pushboolean)(lua_State *L, int b);
  void            (*_lua_pushlightuserdata)(lua_State *L, void *p);
  int             (*_lua_pushthread)(lua_State *L);
  int             (*_lua_getglobal)(lua_State *L, const char *name);
  int             (*_lua_gettable)(lua_State *L, int idx);
  int             (*_lua_getfield)(lua_State *L, int idx, const char *k);
  int             (*_lua_geti)(lua_State *L, int idx, lua_Integer n);
  int             (*_lua_rawget)(lua_State *L, int idx);
  int             (*_lua_rawgeti)(lua_State *L, int idx, lua_Integer n);
  int             (*_lua_rawgetp)(lua_State *L, int idx, const void *p);
  void            (*_lua_createtable)(lua_State *L, int narr, int nrec);
  void *          (*_lua_newuserdata)(lua_State *L, size_t sz);
  int             (*_lua_getmetatable)(lua_State *L, int objindex);
  int             (*_lua_getuservalue)(lua_State *L, int idx);
  void            (*_lua_setglobal)(lua_State *L, const char *name);
  void            (*_lua_settable)(lua_State *L, int idx);
  void            (*_lua_setfield)(lua_State *L, int idx, const char *k);
  void            (*_lua_seti)(lua_State *L, int idx, lua_Integer n);
  void            (*_lua_rawset)(lua_State *L, int idx);
  void            (*_lua_rawseti)(lua_State *L, int idx, lua_Integer n);
  void            (*_lua_rawsetp)(lua_State *L, int idx, const void *p);
  int             (*_lua_setmetatable)(lua_State *L, int objindex);
  void            (*_lua_setuservalue)(lua_State *L, int idx);
  void            (*_lua_callk)(lua_State *L, int nargs, int nresults, lua_KContext ctx, lua_KFunction k);
  int             (*_lua_pcallk)(lua_State *L, int nargs, int nresults, int errfunc, lua_KContext ctx, lua_KFunction k);
  int             (*_lua_load)(lua_State *L, lua_Reader reader, void *dt, const char *chunkname, const char *mode);
  int             (*_lua_dump)(lua_State *L, lua_Writer writer, void *data, int strip);
  int             (*_lua_yieldk)(lua_State *L, int nresults, lua_KContext ctx, lua_KFunction k);
  int             (*_lua_resume)(lua_State *L, lua_State *from, int narg);
  int             (*_lua_status)(lua_State *L);
  int             (*_lua_isyieldable)(lua_State *L);
  int             (*_lua_gc)(lua_State *L, int what, int data);
  int             (*_lua_error)(lua_State *L);
  int             (*_lua_next)(lua_State *L, int idx);
  void            (*_lua_concat)(lua_State *L, int n);
  void            (*_lua_len)(lua_State *L, int idx);
  size_t          (*_lua_stringtonumber)(lua_State *L, const char *s);
  lua_Alloc       (*_lua_getallocf)(lua_State *L, void **ud);
  void            (*_lua_setallocf)(lua_State *L, lua_Alloc f, void *ud);
  int             (*_lua_getstack)(lua_State *L, int level, lua_Debug *ar);
  int             (*_lua_getinfo)(lua_State *L, const char *what, lua_Debug *ar);
  const char *    (*_lua_getlocal)(lua_State *L, const lua_Debug *ar, int n);
  const char *    (*_lua_setlocal)(lua_State *L, const lua_Debug *ar, int n);
  const char *    (*_lua_getupvalue)(lua_State *L, int funcindex, int n);
  const char *    (*_lua_setupvalue)(lua_State *L, int funcindex, int n);
  void *          (*_lua_upvalueid)(lua_State *L, int fidx, int n);
  void            (*_lua_upvaluejoin)(lua_State *L, int fidx1, int n1, int fidx2, int n2);
  void            (*_lua_sethook)(lua_State *L, lua_Hook func, int mask, int count);
  lua_Hook        (*_lua_gethook)(lua_State *L);
  int             (*_lua_gethookmask)(lua_State *L);
  int             (*_lua_gethookcount)(lua_State *L);
  void            (*_luaL_checkversion_)(lua_State *L, lua_Number ver, size_t sz);
  int             (*_luaL_getmetafield)(lua_State *L, int obj, const char *e);
  int             (*_luaL_callmeta)(lua_State *L, int obj, const char *e);
  const char *    (*_luaL_tolstring)(lua_State *L, int idx, size_t *len);
  int             (*_luaL_argerror)(lua_State *L, int arg, const char *extramsg);
  const char *    (*_luaL_checklstring)(lua_State *L, int arg, size_t *l);
  const char *    (*_luaL_optlstring)(lua_State *L, int arg, const char *def, size_t *l);
  lua_Number      (*_luaL_checknumber)(lua_State *L, int arg);
  lua_Number      (*_luaL_optnumber)(lua_State *L, int arg, lua_Number def);
  lua_Integer     (*_luaL_checkinteger)(lua_State *L, int arg);
  lua_Integer     (*_luaL_optinteger)(lua_State *L, int arg, lua_Integer def);
  void            (*_luaL_checkstack)(lua_State *L, int sz, const char *msg);
  void            (*_luaL_checktype)(lua_State *L, int arg, int t);
  void            (*_luaL_checkany)(lua_State *L, int arg);
  int             (*_luaL_newmetatable)(lua_State *L, const char *tname);
  void            (*_luaL_setmetatable)(lua_State *L, const char *tname);
  void *          (*_luaL_testudata)(lua_State *L, int ud, const char *tname);
  void *          (*_luaL_checkudata)(lua_State *L, int ud, const char *tname);
  void            (*_luaL_where)(lua_State *L, int lvl);
  int             (*_luaL_error)(lua_State *L, const char *fmt, ...);
  int             (*_luaL_checkoption)(lua_State *L, int arg, const char *def, const char *const lst[]);
  int             (*_luaL_fileresult)(lua_State *L, int stat, const char *fname);
  int             (*_luaL_execresult)(lua_State *L, int stat);
  int             (*_luaL_ref)(lua_State *L, int t);
  void            (*_luaL_unref)(lua_State *L, int t, int ref);
  int             (*_luaL_loadfilex)(lua_State *L, const char *filename, const char *mode);
  int             (*_luaL_loadbufferx)(lua_State *L, const char *buff, size_t sz, const char *name, const char *mode);
  int             (*_luaL_loadstring)(lua_State *L, const char *s);
  lua_State *     (*_luaL_newstate)(void);
  lua_Integer     (*_luaL_len)(lua_State *L, int idx);
  const char *    (*_luaL_gsub)(lua_State *L, const char *s, const char *p, const char *r);
  void            (*_luaL_setfuncs)(lua_State *L, const luaL_Reg *l, int nup);
  int             (*_luaL_getsubtable)(lua_State *L, int idx, const char *fname);
  void            (*_luaL_traceback)(lua_State *L, lua_State *L1, const char *msg, int level);
  void            (*_luaL_requiref)(lua_State *L, const char *modname, lua_CFunction openf, int glb);
  void            (*_luaL_buffinit)(lua_State *L, luaL_Buffer *B);
  char *          (*_luaL_prepbuffsize)(luaL_Buffer *B, size_t sz);
  void            (*_luaL_addlstring)(luaL_Buffer *B, const char *s, size_t l);
  void            (*_luaL_addstring)(luaL_Buffer *B, const char *s);
  void            (*_luaL_addvalue)(luaL_Buffer *B);
  void            (*_luaL_pushresult)(luaL_Buffer *B);
  void            (*_luaL_pushresultsize)(luaL_Buffer *B, size_t sz);
  char *          (*_luaL_buffinitsize)(lua_State *L, luaL_Buffer *B, size_t sz);
  void            (*_luaL_pushmodule)(lua_State *L, const char *modname, int sizehint);
  void            (*_luaL_openlib)(lua_State *L, const char *libname, const luaL_Reg *l, int nup);
  int             (*_luaopen_base)(lua_State *L);
  int             (*_luaopen_coroutine)(lua_State *L);
  int             (*_luaopen_table)(lua_State *L);
  int             (*_luaopen_io)(lua_State *L);
  int             (*_luaopen_os)(lua_State *L);
  int             (*_luaopen_string)(lua_State *L);
  int             (*_luaopen_utf8)(lua_State *L);
  int             (*_luaopen_bit32)(lua_State *L);
  int             (*_luaopen_math)(lua_State *L);
  int             (*_luaopen_debug)(lua_State *L);
  int             (*_luaopen_package)(lua_State *L);
  void            (*_luaL_openlibs)(lua_State *L);
} LuaProxy;

#endif//_LUA_PROXY_INC_DECL_H__
