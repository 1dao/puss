#!./tools/vlua

dofile('vmake')

-----------------------------
-- puss gtk

local function gobject_enums_parse(cflags, spath, source, match_regex)
	local src, sz, mtime = scan_and_lookup_file(cflags, path_concat(spath, source))
	if not src then return end
	local target = path_concat(GEN_INCLUDE_PATH, source..'.inl')
	if check_deps(target, { [src] = mtime }) then return true end
	local strfmt = string.format
	mkdir_by_targets(target)
	local f = io.open(target, 'w')
	if not f then error('gobject_enums_parse() open file error!') end
	f:write('// generated by vmake, NOT modify it\n')
	f:write(strfmt('// source: %s\n\n', source))
	for line in io.lines(src) do
		local klass = line:match(match_regex)
		if klass then f:write(strfmt('__reg(%s);\n', klass)) end
	end
	f:close()
end

vmake_target_add('puss_gobject', function(target)
	vmake('puss_core')

	local srcpath = path_concat('modules', target)
	make_copy('puss_gobject_ffi_reg.h', PUSS_INCLUDE_PATH, srcpath)
	make_copy('puss_module_gobject.h', PUSS_INCLUDE_PATH, srcpath)

	local cflags = shell('pkg-config --cflags glib-2.0 gobject-2.0 gio-2.0 libffi')
	local libs = shell('pkg-config --libs glib-2.0 gobject-2.0 gio-2.0 libffi')
	gobject_enums_parse(cflags, 'gobject', 'glib-types.h', '^%s*#%s*define%s+(G_TYPE_[_%w]+)')	-- #define G_TYPE_XXX
	gobject_enums_parse(cflags, 'gio', 'gioenumtypes.h', '^%s*#%s*define%s+(G_TYPE_[_%w]+)')	-- #define G_TYPE_XXX

	local objs = make_c2objs(srcpath, nil, INCLUDES, '-fPIC', '-fvisibility=hidden', cflags)
	local output = path_concat('bin', 'modules', target..PUSS_MODULE_SUFFIX..'.so')
	return make_target(output, objs, CC, CFLAGS, '-shared', '-o', output, objs, libs)
end)

vmake_target_add('puss_gtk', function(target)
	vmake('puss_gobject')

	local cflags = shell('pkg-config --cflags gtk+-3.0')
	local libs = shell('pkg-config --libs gtk+-3.0')
	gobject_enums_parse(cflags, 'gdk', 'gdkenumtypes.h', '^%s*#%s*define%s+(GDK_TYPE_[_%w]+)')		-- #define GDK_TYPE_XXX
	gobject_enums_parse(cflags, 'gtk', 'gtktypebuiltins.h', '^%s*#%s*define%s+(GTK_TYPE_[_%w]+)')	-- #define GTK_TYPE_XXX

	local objs = make_c2objs(path_concat('modules', target), nil, INCLUDES, '-fPIC', '-fvisibility=hidden', cflags)
	local output = path_concat('bin', 'modules', target..PUSS_MODULE_SUFFIX..'.so')
	return make_target(output, objs, CC, CFLAGS, '-shared', '-o', output, objs, libs)
end)

vmake_target_add('puss_gtksourceview', function(target)
	vmake('puss_gobject')

	local cflags = shell('pkg-config --cflags gtksourceview-3.0')
	local libs = shell('pkg-config --libs gtksourceview-3.0')
	gobject_enums_parse(cflags, 'gtksourceview', 'gtksourceview-enumtypes.h', '^%s*#%s*define%s+(GTK_SOURCE_TYPE_[_%w]+)')	-- #define GTK_SOURCE_TYPE_XXX

	local objs = make_c2objs(path_concat('modules', target), nil, INCLUDES, '-fPIC', '-fvisibility=hidden', cflags)
	local output = path_concat('bin', 'modules', target..PUSS_MODULE_SUFFIX..'.so')
	return make_target(output, objs, CC, CFLAGS, '-shared', '-o', output, objs, libs)
end)

-----------------------------
-- scintilla gtk

vmake_target_add('gtkscintilla', function(target)
	-- see <scintilla/gtk/makefile>
	local cxxflags = { '-fPIC', '-DGTK', '-DSCI_LEXER', '-DNO_CXX11_REGEX' }
	local gtkcflags =
		{ shell('pkg-config --cflags gtk+-3.0')
		, '-DGDK_PIXBUF_DISABLE_DEPRECATED -DGDK_DISABLE_DEPRECATED -DGTK_DISABLE_DEPRECATED -DDISABLE_GDK_FONT' 
		}
	local incs =
		{ SCINTILLA_INCLUDE_PATH
		, path_concat(SCINTILLA_ROOT_PATH, 'src')
		, path_concat(SCINTILLA_ROOT_PATH, 'lexlib')
		}
	local objpath = path_concat(OBJPATH, 'gtk')
	local objs = make_c2objs(path_concat(SCINTILLA_ROOT_PATH, 'gtk'), objpath, INCLUDES, '-fPIC', gtkcflags)
	local gtkobjs = make_cpp2objs(path_concat(SCINTILLA_ROOT_PATH, 'gtk'), objpath, incs, cxxflags, gtkcflags)
	local srcobjs = make_cpp2objs(path_concat(SCINTILLA_ROOT_PATH, 'src'), objpath, incs, cxxflags)
	local lexlibobjs = make_cpp2objs(path_concat(SCINTILLA_ROOT_PATH, 'lexlib'), objpath, incs, cxxflags)
	local lexobjs = make_cpp2objs(path_concat(SCINTILLA_ROOT_PATH, 'lexers'), objpath, incs, cxxflags)
	table.sort(lexobjs)
	local all_objs = { objs, gtkobjs, srcobjs, lexlibobjs, lexobjs }
	local lib = path_concat(OBJPATH, 'lib'..target..'.a')
	return make_target(lib, all_objs, AR, lib, all_objs)
end)

vmake_target_add('puss_gtkscintilla', function(target)
	vmake('puss_gobject', 'scintilla_iface')
	local slibs = vmake('gtkscintilla')
	local cflags = { '-fPIC', shell('pkg-config --cflags glib-2.0 gmodule-2.0 gtk+-3.0') }
	local libs = shell('pkg-config --libs glib-2.0 gmodule-2.0 gtk+-3.0')
	local objs = make_c2objs(path_concat('modules', target), nil, array_pack(INCLUDES, SCINTILLA_INCLUDE_PATH), '-fPIC', '-fvisibility=hidden', cflags)
	local output = path_concat('bin', 'modules', target..PUSS_MODULE_SUFFIX..'.so')
	return make_target(output, {objs, slibs}, CXX, CFLAGS, CXXFLAGS, '-shared', cflags, '-o', output, objs, slibs, libs)
end)

